{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0231395f-d7a2-48b2-9e44-347c38e95a0b",
   "metadata": {},
   "source": [
    "# Post Earnings Announcement Drift (PEAD) \n",
    "---\n",
    "\n",
    "Post Earnings Announcement Drift (PEAD)is a well-documented anomaly in equity markets where a stock’s price continues to move in the same direction—up or down—following an earnings surprise. If a company delivers better-than-expected results, the initial positive price reaction often persists for days or even weeks, and similarly, weaker-than-expected earnings can lead to prolonged negative pressure on the stock. This effect challenges the idea of instant information assimilation in efficient markets, suggesting that investors may initially underreact to new earnings information, with prices gradually adjusting to reflect the full impact of the announcement."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5eac2660-90ff-4d63-9f0b-823a78abfbde",
   "metadata": {},
   "source": [
    "Below is a concise overview of how we’ll implement a **Post-Earnings Announcement Drift (PEAD)** trading strategy in this notebook. Rather than deciding whether earnings are “good” or “bad” ourselves, we’ll rely on the market’s price action following an announcement to guide our trades.\n",
    "\n",
    "### Strategy Outline\n",
    "\n",
    "1. **Import Necessary Libraries**  \n",
    "   Bring in Python packages for data manipulation, date handling, and any other statistical or plotting requirements.\n",
    "\n",
    "2. **Read Earnings Data**  \n",
    "   Load the earnings announcement dates for each stock to identify when price movement may be influenced by new financial information.\n",
    "\n",
    "3. **Compile Times of Earnings Announcements**  \n",
    "   Organize and format these dates in a way that’s easy to merge with stock price data.\n",
    "\n",
    "4. **Read Stock Data and Compute Standard Deviation of Returns**  \n",
    "   Pull historical price information (e.g., daily close) and calculate the volatility metric that will help gauge the significance of price moves.\n",
    "\n",
    "5. **Merge Stock Data and Earnings Announcement Dates**  \n",
    "   Align each stock’s price series with its respective earnings dates to determine which returns fall immediately before or after an announcement.\n",
    "\n",
    "6. **Take Long and Short Positions**  \n",
    "   Let the actual price movement dictate your position:\n",
    "   - **Long** if the price moves up post-announcement  \n",
    "   - **Short** if the price moves down post-announcement  \n",
    "\n",
    "7. **Calculate Strategy Returns**  \n",
    "   Evaluate the performance of this PEAD-based approach by computing overall returns and other relevant metrics (e.g., Sharpe ratio, drawdowns).\n",
    "\n",
    "By focusing on **price signals** rather than trying to interpret the earnings data directly, this strategy leverages the market’s collective reaction to potentially capture the drift effect that often follows earnings surprises."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1291785e-b590-44cc-9bef-9a74b969b99d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "from datetime import datetime, timedelta\n",
    "from pandas.tseries.offsets import BDay"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "afdaf247-85fa-4a18-b011-8c1c5c801bb5",
   "metadata": {},
   "source": [
    "Read the data from the csv labelled 'earnings_data_2018_2019.csv' which you can download from\n",
    "\n",
    "# ADD GITHUB LINK TO FILE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8b50919d-d31d-4423-810a-d59840864cc7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>companyshortname</th>\n",
       "      <th>epsactual</th>\n",
       "      <th>epsestimate</th>\n",
       "      <th>epssurprisepct</th>\n",
       "      <th>gmtOffsetMilliSeconds</th>\n",
       "      <th>quoteType</th>\n",
       "      <th>startdatetime</th>\n",
       "      <th>startdatetimetype</th>\n",
       "      <th>ticker</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Nutriband Inc</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>EQUITY</td>\n",
       "      <td>2018-01-06T02:00:00.000Z</td>\n",
       "      <td>AMC</td>\n",
       "      <td>NTRB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Hingham Institution For Savings</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>EQUITY</td>\n",
       "      <td>2018-01-18T15:59:00.000Z</td>\n",
       "      <td>TNS</td>\n",
       "      <td>HIFS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>General American Investors Co Inc</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>EQUITY</td>\n",
       "      <td>2018-01-25T02:00:00.000Z</td>\n",
       "      <td>AMC</td>\n",
       "      <td>GAM</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Greene County Bancorp Inc</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>EQUITY</td>\n",
       "      <td>2018-01-24T15:59:00.000Z</td>\n",
       "      <td>TNS</td>\n",
       "      <td>GCBC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Riverview Bancorp Inc</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>EQUITY</td>\n",
       "      <td>2018-01-25T21:00:00.000Z</td>\n",
       "      <td>TAS</td>\n",
       "      <td>RVSB</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0                   companyshortname  epsactual  epsestimate  \\\n",
       "0           0                      Nutriband Inc        NaN          NaN   \n",
       "1           1    Hingham Institution For Savings        NaN          NaN   \n",
       "2           2  General American Investors Co Inc        NaN          NaN   \n",
       "3           3          Greene County Bancorp Inc        NaN          NaN   \n",
       "4           4              Riverview Bancorp Inc        NaN          NaN   \n",
       "\n",
       "   epssurprisepct  gmtOffsetMilliSeconds quoteType             startdatetime  \\\n",
       "0             NaN                      0    EQUITY  2018-01-06T02:00:00.000Z   \n",
       "1             NaN                      0    EQUITY  2018-01-18T15:59:00.000Z   \n",
       "2             NaN                      0    EQUITY  2018-01-25T02:00:00.000Z   \n",
       "3             NaN                      0    EQUITY  2018-01-24T15:59:00.000Z   \n",
       "4             NaN                      0    EQUITY  2018-01-25T21:00:00.000Z   \n",
       "\n",
       "  startdatetimetype ticker  \n",
       "0               AMC   NTRB  \n",
       "1               TNS   HIFS  \n",
       "2               AMC    GAM  \n",
       "3               TNS   GCBC  \n",
       "4               TAS   RVSB  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "earnings_data = pd.read_csv('earnings_data_2018_2019.csv')\n",
    "earnings_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75b2bc23-94ea-4b47-b3fa-d3da998671bc",
   "metadata": {},
   "source": [
    "A little bit of cleaning and organising. Feel free to experiment with any ticker"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3635654f-8ee5-45ca-82e3-bc80fef08709",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>companyshortname</th>\n",
       "      <th>epsactual</th>\n",
       "      <th>epsestimate</th>\n",
       "      <th>epssurprisepct</th>\n",
       "      <th>gmtOffsetMilliSeconds</th>\n",
       "      <th>quoteType</th>\n",
       "      <th>startdatetime</th>\n",
       "      <th>startdatetimetype</th>\n",
       "      <th>ticker</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1460</th>\n",
       "      <td>Apple Inc</td>\n",
       "      <td>2.73</td>\n",
       "      <td>2.67</td>\n",
       "      <td>2.25</td>\n",
       "      <td>0</td>\n",
       "      <td>EQUITY</td>\n",
       "      <td>2018-05-01T20:30:00.000Z</td>\n",
       "      <td>TAS</td>\n",
       "      <td>AAPL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5311</th>\n",
       "      <td>Apple Inc</td>\n",
       "      <td>2.34</td>\n",
       "      <td>2.18</td>\n",
       "      <td>7.34</td>\n",
       "      <td>0</td>\n",
       "      <td>EQUITY</td>\n",
       "      <td>2018-07-31T20:30:00.000Z</td>\n",
       "      <td>TAS</td>\n",
       "      <td>AAPL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10087</th>\n",
       "      <td>Apple Inc</td>\n",
       "      <td>2.91</td>\n",
       "      <td>2.78</td>\n",
       "      <td>4.68</td>\n",
       "      <td>0</td>\n",
       "      <td>EQUITY</td>\n",
       "      <td>2018-11-01T20:30:00.000Z</td>\n",
       "      <td>TAS</td>\n",
       "      <td>AAPL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13545</th>\n",
       "      <td>Apple Inc</td>\n",
       "      <td>4.18</td>\n",
       "      <td>4.17</td>\n",
       "      <td>0.24</td>\n",
       "      <td>0</td>\n",
       "      <td>EQUITY</td>\n",
       "      <td>2019-01-29T21:30:00.000Z</td>\n",
       "      <td>TAS</td>\n",
       "      <td>AAPL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18734</th>\n",
       "      <td>Apple Inc</td>\n",
       "      <td>2.46</td>\n",
       "      <td>2.36</td>\n",
       "      <td>4.24</td>\n",
       "      <td>0</td>\n",
       "      <td>EQUITY</td>\n",
       "      <td>2019-04-30T20:30:00.000Z</td>\n",
       "      <td>TAS</td>\n",
       "      <td>AAPL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23424</th>\n",
       "      <td>Apple Inc</td>\n",
       "      <td>2.18</td>\n",
       "      <td>2.10</td>\n",
       "      <td>3.81</td>\n",
       "      <td>0</td>\n",
       "      <td>EQUITY</td>\n",
       "      <td>2019-07-30T20:30:00.000Z</td>\n",
       "      <td>TAS</td>\n",
       "      <td>AAPL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28685</th>\n",
       "      <td>Apple Inc</td>\n",
       "      <td>3.03</td>\n",
       "      <td>2.84</td>\n",
       "      <td>6.69</td>\n",
       "      <td>0</td>\n",
       "      <td>EQUITY</td>\n",
       "      <td>2019-10-30T20:30:00.000Z</td>\n",
       "      <td>TAS</td>\n",
       "      <td>AAPL</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      companyshortname  epsactual  epsestimate  epssurprisepct  \\\n",
       "1460         Apple Inc       2.73         2.67            2.25   \n",
       "5311         Apple Inc       2.34         2.18            7.34   \n",
       "10087        Apple Inc       2.91         2.78            4.68   \n",
       "13545        Apple Inc       4.18         4.17            0.24   \n",
       "18734        Apple Inc       2.46         2.36            4.24   \n",
       "23424        Apple Inc       2.18         2.10            3.81   \n",
       "28685        Apple Inc       3.03         2.84            6.69   \n",
       "\n",
       "       gmtOffsetMilliSeconds quoteType             startdatetime  \\\n",
       "1460                       0    EQUITY  2018-05-01T20:30:00.000Z   \n",
       "5311                       0    EQUITY  2018-07-31T20:30:00.000Z   \n",
       "10087                      0    EQUITY  2018-11-01T20:30:00.000Z   \n",
       "13545                      0    EQUITY  2019-01-29T21:30:00.000Z   \n",
       "18734                      0    EQUITY  2019-04-30T20:30:00.000Z   \n",
       "23424                      0    EQUITY  2019-07-30T20:30:00.000Z   \n",
       "28685                      0    EQUITY  2019-10-30T20:30:00.000Z   \n",
       "\n",
       "      startdatetimetype ticker  \n",
       "1460                TAS   AAPL  \n",
       "5311                TAS   AAPL  \n",
       "10087               TAS   AAPL  \n",
       "13545               TAS   AAPL  \n",
       "18734               TAS   AAPL  \n",
       "23424               TAS   AAPL  \n",
       "28685               TAS   AAPL  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ticker ='AAPL'\n",
    "\n",
    "earnings_data = earnings_data.drop('Unnamed: 0', axis =1)\n",
    "earnings_data = earnings_data.sort_values(by='startdatetime', axis=0)\n",
    "earnings_data = earnings_data[earnings_data['ticker'] == ticker]\n",
    "\n",
    "earnings_data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35a96d86-3451-416c-8ba1-85ac5a9cba29",
   "metadata": {},
   "source": [
    "We specifically focus on earnings announcements released after the previous trading session closes and before the start of the current trading day.\n",
    "\n",
    "Therefore it's necessary to compile the times of the earnings announcement\n",
    "\n",
    "> NOTE: In pandas, BDay (short for “BusinessDay”) is a special date offset or frequency object representing business days. It’s primarily used to generate date ranges or shift timestamps while ignoring weekends (and optionally, custom holidays)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e2e5c83b-52b2-4278-b651-7a1a203152bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_trade_open(date):\n",
    "    \n",
    "    curr_date_open  = pd.to_datetime(date).floor('d').replace(hour=9, minute=30) - BDay(0)       # 1\n",
    "    curr_date_close = pd.to_datetime(date).floor('d').replace(hour=16, minute=0) - BDay(0)       # 2\n",
    "    prev_date_close = (curr_date_open - BDay()).replace(hour=16, minute=0)                       # 3\n",
    "    next_date_open  = (curr_date_close + BDay()).replace(hour=9, minute=30)                      # 4\n",
    "    \n",
    "    if ((pd.to_datetime(date) >= prev_date_close) & (pd.to_datetime(date) < curr_date_open)):    # 5\n",
    "        return curr_date_open\n",
    "    elif ((pd.to_datetime(date) >= curr_date_close) & (pd.to_datetime(date) < next_date_open)):  # 6\n",
    "        return next_date_open\n",
    "    else:\n",
    "        return None"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6196ece4-17cf-4d26-b43f-511a4b83592d",
   "metadata": {},
   "source": [
    "1. If earnings announcement was made on the weekend, subtract BDay(0) for next business day's market **open** time\n",
    "2. If earnings announcement was made on the weekend, subtract BDay(0) for next business day's market **close** time\n",
    "3. Calculate the previous business day's market **close** time for the earnings announcement \n",
    "4. Calculate the next business day's market **open** time for the earnings announcement\n",
    "5. If the earnings announcement was made after the close of the previous business day and on the next day before the market opens then the function assigns the curr_date_open as the opening time when this announcement should be used to trade\n",
    "6. If the earnings announcement was made after the close of the current business day and on the next day open then the function assigns the next_date_open as the opening time  when this announcement should be used to trade\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53f61ae8-d881-4f51-9ad1-e6b67d55de7c",
   "metadata": {},
   "source": [
    "Apply `get_trade_open()` to find the trading time for each news headline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5c674ee8-39f5-4715-8302-6d32c89c4af1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>companyshortname</th>\n",
       "      <th>epsactual</th>\n",
       "      <th>epsestimate</th>\n",
       "      <th>epssurprisepct</th>\n",
       "      <th>gmtOffsetMilliSeconds</th>\n",
       "      <th>quoteType</th>\n",
       "      <th>startdatetime</th>\n",
       "      <th>startdatetimetype</th>\n",
       "      <th>ticker</th>\n",
       "      <th>trading_time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1460</th>\n",
       "      <td>Apple Inc</td>\n",
       "      <td>2.73</td>\n",
       "      <td>2.67</td>\n",
       "      <td>2.25</td>\n",
       "      <td>0</td>\n",
       "      <td>EQUITY</td>\n",
       "      <td>2018-05-01T20:30:00.000Z</td>\n",
       "      <td>TAS</td>\n",
       "      <td>AAPL</td>\n",
       "      <td>2018-05-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5311</th>\n",
       "      <td>Apple Inc</td>\n",
       "      <td>2.34</td>\n",
       "      <td>2.18</td>\n",
       "      <td>7.34</td>\n",
       "      <td>0</td>\n",
       "      <td>EQUITY</td>\n",
       "      <td>2018-07-31T20:30:00.000Z</td>\n",
       "      <td>TAS</td>\n",
       "      <td>AAPL</td>\n",
       "      <td>2018-08-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10087</th>\n",
       "      <td>Apple Inc</td>\n",
       "      <td>2.91</td>\n",
       "      <td>2.78</td>\n",
       "      <td>4.68</td>\n",
       "      <td>0</td>\n",
       "      <td>EQUITY</td>\n",
       "      <td>2018-11-01T20:30:00.000Z</td>\n",
       "      <td>TAS</td>\n",
       "      <td>AAPL</td>\n",
       "      <td>2018-11-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13545</th>\n",
       "      <td>Apple Inc</td>\n",
       "      <td>4.18</td>\n",
       "      <td>4.17</td>\n",
       "      <td>0.24</td>\n",
       "      <td>0</td>\n",
       "      <td>EQUITY</td>\n",
       "      <td>2019-01-29T21:30:00.000Z</td>\n",
       "      <td>TAS</td>\n",
       "      <td>AAPL</td>\n",
       "      <td>2019-01-30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18734</th>\n",
       "      <td>Apple Inc</td>\n",
       "      <td>2.46</td>\n",
       "      <td>2.36</td>\n",
       "      <td>4.24</td>\n",
       "      <td>0</td>\n",
       "      <td>EQUITY</td>\n",
       "      <td>2019-04-30T20:30:00.000Z</td>\n",
       "      <td>TAS</td>\n",
       "      <td>AAPL</td>\n",
       "      <td>2019-05-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23424</th>\n",
       "      <td>Apple Inc</td>\n",
       "      <td>2.18</td>\n",
       "      <td>2.10</td>\n",
       "      <td>3.81</td>\n",
       "      <td>0</td>\n",
       "      <td>EQUITY</td>\n",
       "      <td>2019-07-30T20:30:00.000Z</td>\n",
       "      <td>TAS</td>\n",
       "      <td>AAPL</td>\n",
       "      <td>2019-07-31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28685</th>\n",
       "      <td>Apple Inc</td>\n",
       "      <td>3.03</td>\n",
       "      <td>2.84</td>\n",
       "      <td>6.69</td>\n",
       "      <td>0</td>\n",
       "      <td>EQUITY</td>\n",
       "      <td>2019-10-30T20:30:00.000Z</td>\n",
       "      <td>TAS</td>\n",
       "      <td>AAPL</td>\n",
       "      <td>2019-10-31</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      companyshortname  epsactual  epsestimate  epssurprisepct  \\\n",
       "1460         Apple Inc       2.73         2.67            2.25   \n",
       "5311         Apple Inc       2.34         2.18            7.34   \n",
       "10087        Apple Inc       2.91         2.78            4.68   \n",
       "13545        Apple Inc       4.18         4.17            0.24   \n",
       "18734        Apple Inc       2.46         2.36            4.24   \n",
       "23424        Apple Inc       2.18         2.10            3.81   \n",
       "28685        Apple Inc       3.03         2.84            6.69   \n",
       "\n",
       "       gmtOffsetMilliSeconds quoteType             startdatetime  \\\n",
       "1460                       0    EQUITY  2018-05-01T20:30:00.000Z   \n",
       "5311                       0    EQUITY  2018-07-31T20:30:00.000Z   \n",
       "10087                      0    EQUITY  2018-11-01T20:30:00.000Z   \n",
       "13545                      0    EQUITY  2019-01-29T21:30:00.000Z   \n",
       "18734                      0    EQUITY  2019-04-30T20:30:00.000Z   \n",
       "23424                      0    EQUITY  2019-07-30T20:30:00.000Z   \n",
       "28685                      0    EQUITY  2019-10-30T20:30:00.000Z   \n",
       "\n",
       "      startdatetimetype ticker trading_time  \n",
       "1460                TAS   AAPL   2018-05-02  \n",
       "5311                TAS   AAPL   2018-08-01  \n",
       "10087               TAS   AAPL   2018-11-02  \n",
       "13545               TAS   AAPL   2019-01-30  \n",
       "18734               TAS   AAPL   2019-05-01  \n",
       "23424               TAS   AAPL   2019-07-31  \n",
       "28685               TAS   AAPL   2019-10-31  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "earnings_data['trading_time'] = earnings_data['startdatetime'].apply(get_trade_open).dt.date\n",
    "earnings_data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e6bd288-1944-4cf8-843f-b2ee1d777785",
   "metadata": {},
   "source": [
    "We can now lose a few columns that won't be further required"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4f36114d-5b9c-4cb2-a4e4-7a87ed04eae0",
   "metadata": {},
   "outputs": [],
   "source": [
    "earnings_data = earnings_data.loc[:,['startdatetime','ticker', 'trading_time']]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07ff0a3a-4506-4c7c-b5f0-d8d044585c4d",
   "metadata": {},
   "source": [
    "Let's also convert trading time to datetime format and set this as the index "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "70a53987-a68e-4b90-8dc1-9c00ec578c70",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>startdatetime</th>\n",
       "      <th>ticker</th>\n",
       "      <th>trading_time</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>trading_time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-05-02</th>\n",
       "      <td>2018-05-01T20:30:00.000Z</td>\n",
       "      <td>AAPL</td>\n",
       "      <td>2018-05-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-08-01</th>\n",
       "      <td>2018-07-31T20:30:00.000Z</td>\n",
       "      <td>AAPL</td>\n",
       "      <td>2018-08-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-11-02</th>\n",
       "      <td>2018-11-01T20:30:00.000Z</td>\n",
       "      <td>AAPL</td>\n",
       "      <td>2018-11-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-30</th>\n",
       "      <td>2019-01-29T21:30:00.000Z</td>\n",
       "      <td>AAPL</td>\n",
       "      <td>2019-01-30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-05-01</th>\n",
       "      <td>2019-04-30T20:30:00.000Z</td>\n",
       "      <td>AAPL</td>\n",
       "      <td>2019-05-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-07-31</th>\n",
       "      <td>2019-07-30T20:30:00.000Z</td>\n",
       "      <td>AAPL</td>\n",
       "      <td>2019-07-31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-31</th>\n",
       "      <td>2019-10-30T20:30:00.000Z</td>\n",
       "      <td>AAPL</td>\n",
       "      <td>2019-10-31</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         startdatetime ticker trading_time\n",
       "trading_time                                              \n",
       "2018-05-02    2018-05-01T20:30:00.000Z   AAPL   2018-05-02\n",
       "2018-08-01    2018-07-31T20:30:00.000Z   AAPL   2018-08-01\n",
       "2018-11-02    2018-11-01T20:30:00.000Z   AAPL   2018-11-02\n",
       "2019-01-30    2019-01-29T21:30:00.000Z   AAPL   2019-01-30\n",
       "2019-05-01    2019-04-30T20:30:00.000Z   AAPL   2019-05-01\n",
       "2019-07-31    2019-07-30T20:30:00.000Z   AAPL   2019-07-31\n",
       "2019-10-31    2019-10-30T20:30:00.000Z   AAPL   2019-10-31"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "earnings_data['trading_time'] = pd.to_datetime(earnings_data.trading_time)\n",
    "earnings_data= earnings_data.set_index(earnings_data.trading_time)\n",
    "earnings_data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6329b85f-3f85-45a2-ad5c-faf17da0f22a",
   "metadata": {},
   "source": [
    "Okay, now let's read in the price data, convert index into datetime format and select for a single stock ('AMZN')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "27ccb8aa-0c5a-486a-b0ed-989416983b85",
   "metadata": {},
   "outputs": [],
   "source": [
    "price_data = pd.read_csv('spy_stocks_data_2017_2019.csv', index_col=0)\n",
    "price_data.index = pd.to_datetime(price_data.index,format='%d-%m-%Y')\n",
    "price_data = price_data[price_data['ticker'] == ticker]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e28524b-e94c-4dde-8728-49e07b89b7b4",
   "metadata": {},
   "source": [
    "Calculate the previous day's close to the next day's open return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9d2d7bfe-3d77-45fd-b40b-e8dc6c41e976",
   "metadata": {},
   "outputs": [],
   "source": [
    "price_data['returns'] = (price_data.Open - price_data.Close.shift(1)) / price_data.Close.shift(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16f8a229-43e4-4348-a5f1-bb8d07b67e4e",
   "metadata": {},
   "source": [
    "Let's also calculate the 90-day moving standard deviation of the return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "042d2272-1eff-43d0-8d00-fdd1a5aa8503",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ticker</th>\n",
       "      <th>Open</th>\n",
       "      <th>Close</th>\n",
       "      <th>returns</th>\n",
       "      <th>std</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2017-01-03</th>\n",
       "      <td>AAPL</td>\n",
       "      <td>115.800003</td>\n",
       "      <td>116.150002</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-04</th>\n",
       "      <td>AAPL</td>\n",
       "      <td>115.849998</td>\n",
       "      <td>116.019997</td>\n",
       "      <td>-0.002583</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-05</th>\n",
       "      <td>AAPL</td>\n",
       "      <td>115.919998</td>\n",
       "      <td>116.610001</td>\n",
       "      <td>-0.000862</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-06</th>\n",
       "      <td>AAPL</td>\n",
       "      <td>116.779999</td>\n",
       "      <td>117.910004</td>\n",
       "      <td>0.001458</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-09</th>\n",
       "      <td>AAPL</td>\n",
       "      <td>117.949997</td>\n",
       "      <td>118.989998</td>\n",
       "      <td>0.000339</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           ticker        Open       Close   returns  std\n",
       "Date                                                    \n",
       "2017-01-03   AAPL  115.800003  116.150002       NaN  NaN\n",
       "2017-01-04   AAPL  115.849998  116.019997 -0.002583  NaN\n",
       "2017-01-05   AAPL  115.919998  116.610001 -0.000862  NaN\n",
       "2017-01-06   AAPL  116.779999  117.910004  0.001458  NaN\n",
       "2017-01-09   AAPL  117.949997  118.989998  0.000339  NaN"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "price_data['std'] = price_data['returns'].rolling(90).std() \n",
    "price_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3aa6f933-4a33-4e8a-9e28-ce166073c49b",
   "metadata": {},
   "source": [
    "We then merge the **price_data** DataFrame with the **earnings_data** DataFrame—specifically using the `trading_time` and `startdatetime` columns from `earnings_data`—to ensure each price record aligns with the corresponding earnings announcement date and time. This step allows us to pinpoint which price movements coincide with recent earnings releases."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9e82c4cf-5871-4dca-b66b-efdee90cb13b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ticker</th>\n",
       "      <th>Open</th>\n",
       "      <th>Close</th>\n",
       "      <th>returns</th>\n",
       "      <th>std</th>\n",
       "      <th>trading_time</th>\n",
       "      <th>startdatetime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-05-02</th>\n",
       "      <td>AAPL</td>\n",
       "      <td>175.229996</td>\n",
       "      <td>176.570007</td>\n",
       "      <td>0.036251</td>\n",
       "      <td>0.008523</td>\n",
       "      <td>2018-05-02</td>\n",
       "      <td>2018-05-01T20:30:00.000Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-08-01</th>\n",
       "      <td>AAPL</td>\n",
       "      <td>199.130005</td>\n",
       "      <td>201.500000</td>\n",
       "      <td>0.046455</td>\n",
       "      <td>0.009165</td>\n",
       "      <td>2018-08-01</td>\n",
       "      <td>2018-07-31T20:30:00.000Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-11-02</th>\n",
       "      <td>AAPL</td>\n",
       "      <td>209.550003</td>\n",
       "      <td>207.479996</td>\n",
       "      <td>-0.057016</td>\n",
       "      <td>0.010619</td>\n",
       "      <td>2018-11-02</td>\n",
       "      <td>2018-11-01T20:30:00.000Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-30</th>\n",
       "      <td>AAPL</td>\n",
       "      <td>163.250000</td>\n",
       "      <td>165.250000</td>\n",
       "      <td>0.055405</td>\n",
       "      <td>0.017582</td>\n",
       "      <td>2019-01-30</td>\n",
       "      <td>2019-01-29T21:30:00.000Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-05-01</th>\n",
       "      <td>AAPL</td>\n",
       "      <td>209.880005</td>\n",
       "      <td>210.520004</td>\n",
       "      <td>0.045896</td>\n",
       "      <td>0.013926</td>\n",
       "      <td>2019-05-01</td>\n",
       "      <td>2019-04-30T20:30:00.000Z</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           ticker        Open       Close   returns       std trading_time  \\\n",
       "2018-05-02   AAPL  175.229996  176.570007  0.036251  0.008523   2018-05-02   \n",
       "2018-08-01   AAPL  199.130005  201.500000  0.046455  0.009165   2018-08-01   \n",
       "2018-11-02   AAPL  209.550003  207.479996 -0.057016  0.010619   2018-11-02   \n",
       "2019-01-30   AAPL  163.250000  165.250000  0.055405  0.017582   2019-01-30   \n",
       "2019-05-01   AAPL  209.880005  210.520004  0.045896  0.013926   2019-05-01   \n",
       "\n",
       "                       startdatetime  \n",
       "2018-05-02  2018-05-01T20:30:00.000Z  \n",
       "2018-08-01  2018-07-31T20:30:00.000Z  \n",
       "2018-11-02  2018-11-01T20:30:00.000Z  \n",
       "2019-01-30  2019-01-29T21:30:00.000Z  \n",
       "2019-05-01  2019-04-30T20:30:00.000Z  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "earnings_price_data = pd.merge(price_data, earnings_data[[\n",
    "                               'trading_time', 'startdatetime']], \n",
    "                               how='inner', \n",
    "                               left_index=True, \n",
    "                               right_index=True)\n",
    "\n",
    "earnings_price_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9de08cb1-3883-4e67-b0c8-9356ecf69539",
   "metadata": {},
   "source": [
    "### **Taking Long and Short Positions Based on PEAD Strategy**\n",
    "\n",
    "We define our trading positions based on the **previous close-to-open return** and its relationship to the **moving standard deviation** of returns.\n",
    "\n",
    "#### **1. Long Position (Buy at Open)**\n",
    "- We take a **long position** (buy at open) if the **return is greater than or equal to** **0.25 times the moving standard deviation** of returns.  \n",
    "- This indicates a significant gap-up movement, likely driven by a strong earnings reaction.\n",
    "\n",
    "#### **2. Short Position (Sell at Open)**\n",
    "- We take a **short position** (sell at open) if the **return is less than or equal to** **-0.25 times the moving standard deviation** of returns.  \n",
    "- This suggests a substantial gap-down, signaling a negative earnings reaction.\n",
    "\n",
    "This approach ensures we only enter positions when the earnings-driven price movement is large enough to be meaningful, reducing false signals from minor fluctuations.\n",
    "\n",
    "As we've seen before let's create a column to store the value of long and short positions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c2df76a7-144c-4a1e-afa9-21633a78d204",
   "metadata": {},
   "outputs": [],
   "source": [
    "earnings_price_data['positions'] = np.nan"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "995dee63-206c-483f-8d6f-9bc68c6f16a0",
   "metadata": {},
   "source": [
    "Now we can define our long and short positions and how we'll store them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b2a91265-31d7-44b2-be87-a999df7f3b2d",
   "metadata": {},
   "outputs": [],
   "source": [
    "long_entry  = earnings_price_data['returns'] >=  0.25 * earnings_price_data['std']\n",
    "short_entry = earnings_price_data['returns'] <= -0.25 * earnings_price_data['std']\n",
    "\n",
    "earnings_price_data.loc[long_entry,  'positions'] = 1\n",
    "earnings_price_data.loc[short_entry, 'positions'] = -1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a3747b8-29ca-4dd3-9c10-f659152ae3ae",
   "metadata": {},
   "source": [
    "before cleaning things up and inspecting our data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9a380b1f-36f8-439a-90d3-4be424986e17",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ticker</th>\n",
       "      <th>Open</th>\n",
       "      <th>Close</th>\n",
       "      <th>returns</th>\n",
       "      <th>std</th>\n",
       "      <th>trading_time</th>\n",
       "      <th>startdatetime</th>\n",
       "      <th>positions</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-05-02</th>\n",
       "      <td>AAPL</td>\n",
       "      <td>175.229996</td>\n",
       "      <td>176.570007</td>\n",
       "      <td>0.036251</td>\n",
       "      <td>0.008523</td>\n",
       "      <td>2018-05-02</td>\n",
       "      <td>2018-05-01T20:30:00.000Z</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-08-01</th>\n",
       "      <td>AAPL</td>\n",
       "      <td>199.130005</td>\n",
       "      <td>201.500000</td>\n",
       "      <td>0.046455</td>\n",
       "      <td>0.009165</td>\n",
       "      <td>2018-08-01</td>\n",
       "      <td>2018-07-31T20:30:00.000Z</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-11-02</th>\n",
       "      <td>AAPL</td>\n",
       "      <td>209.550003</td>\n",
       "      <td>207.479996</td>\n",
       "      <td>-0.057016</td>\n",
       "      <td>0.010619</td>\n",
       "      <td>2018-11-02</td>\n",
       "      <td>2018-11-01T20:30:00.000Z</td>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-30</th>\n",
       "      <td>AAPL</td>\n",
       "      <td>163.250000</td>\n",
       "      <td>165.250000</td>\n",
       "      <td>0.055405</td>\n",
       "      <td>0.017582</td>\n",
       "      <td>2019-01-30</td>\n",
       "      <td>2019-01-29T21:30:00.000Z</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-05-01</th>\n",
       "      <td>AAPL</td>\n",
       "      <td>209.880005</td>\n",
       "      <td>210.520004</td>\n",
       "      <td>0.045896</td>\n",
       "      <td>0.013926</td>\n",
       "      <td>2019-05-01</td>\n",
       "      <td>2019-04-30T20:30:00.000Z</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-07-31</th>\n",
       "      <td>AAPL</td>\n",
       "      <td>216.419998</td>\n",
       "      <td>213.039993</td>\n",
       "      <td>0.036594</td>\n",
       "      <td>0.012284</td>\n",
       "      <td>2019-07-31</td>\n",
       "      <td>2019-07-30T20:30:00.000Z</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-31</th>\n",
       "      <td>AAPL</td>\n",
       "      <td>247.240005</td>\n",
       "      <td>248.759995</td>\n",
       "      <td>0.016361</td>\n",
       "      <td>0.009911</td>\n",
       "      <td>2019-10-31</td>\n",
       "      <td>2019-10-30T20:30:00.000Z</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           ticker        Open       Close   returns       std trading_time  \\\n",
       "2018-05-02   AAPL  175.229996  176.570007  0.036251  0.008523   2018-05-02   \n",
       "2018-08-01   AAPL  199.130005  201.500000  0.046455  0.009165   2018-08-01   \n",
       "2018-11-02   AAPL  209.550003  207.479996 -0.057016  0.010619   2018-11-02   \n",
       "2019-01-30   AAPL  163.250000  165.250000  0.055405  0.017582   2019-01-30   \n",
       "2019-05-01   AAPL  209.880005  210.520004  0.045896  0.013926   2019-05-01   \n",
       "2019-07-31   AAPL  216.419998  213.039993  0.036594  0.012284   2019-07-31   \n",
       "2019-10-31   AAPL  247.240005  248.759995  0.016361  0.009911   2019-10-31   \n",
       "\n",
       "                       startdatetime  positions  \n",
       "2018-05-02  2018-05-01T20:30:00.000Z        1.0  \n",
       "2018-08-01  2018-07-31T20:30:00.000Z        1.0  \n",
       "2018-11-02  2018-11-01T20:30:00.000Z       -1.0  \n",
       "2019-01-30  2019-01-29T21:30:00.000Z        1.0  \n",
       "2019-05-01  2019-04-30T20:30:00.000Z        1.0  \n",
       "2019-07-31  2019-07-30T20:30:00.000Z        1.0  \n",
       "2019-10-31  2019-10-30T20:30:00.000Z        1.0  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "earnings_price_data = earnings_price_data.dropna()\n",
    "earnings_price_data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9262b3c6-116e-43e0-b20d-26c7d50d8f5f",
   "metadata": {},
   "source": [
    "Calculate the returns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2f2f8c44-87c6-4dc7-98f9-1200f6f73e24",
   "metadata": {},
   "outputs": [],
   "source": [
    "strategy_returns = ((earnings_price_data['Close'] - earnings_price_data['Open']) /\n",
    "                     earnings_price_data['Open']) * earnings_price_data['positions']\n",
    "\n",
    "cumulative_strategy_returns = (strategy_returns + 1).cumprod()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1be24110-58a0-460a-a52f-37e3aa374d35",
   "metadata": {},
   "source": [
    "Finally, let's plot the cumulative returns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "edd13600-fa1f-42fb-bcc2-cee19730dc0b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1600x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(16, 8))\n",
    "plt.plot(cumulative_strategy_returns)\n",
    "plt.grid()\n",
    "\n",
    "plt.title('Cumulative Strategy Returns', fontsize=16)\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Cumulative Returns');"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "338530b1-73c9-4813-a466-956e500aabf6",
   "metadata": {},
   "source": [
    "Let's consolidate the strategy above into one function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "fa981006-10c1-4660-b023-e4786c9eada7",
   "metadata": {},
   "outputs": [],
   "source": [
    "def pead_strategy(ticker, earnings_data, price_data):\n",
    "    \n",
    "    price_data = price_data[price_data.ticker == ticker]\n",
    "    price_data.index = pd.to_datetime(price_data.index, format = '%d-%m-%Y')\n",
    "    price_data['returns'] = (price_data.Open - price_data.Close.shift(1)) / price_data.Close.shift(1)\n",
    "    price_data['std'] = price_data['returns'].rolling(90).std()\n",
    "    \n",
    "    earnings_data = earnings_data[earnings_data['ticker'] == ticker]\n",
    "    earnings_data[\"trading_time\"] = earnings_data[\"startdatetime\"].apply(get_trade_open)\n",
    "    earnings_data = earnings_data.loc[:,['startdatetime','ticker', 'trading_time']]\n",
    "    earnings_data['trading_time'] = pd.to_datetime(earnings_data.trading_time).dt.date\n",
    "    earnings_data = earnings_data.set_index(earnings_data.trading_time)    \n",
    "    earnings_price_data = pd.merge(price_data, earnings_data[[\n",
    "        'trading_time', 'startdatetime']], how='inner', left_index=True, right_index=True)\n",
    "    \n",
    "    earnings_price_data['positions'] = np.nan\n",
    "    long_entry = earnings_price_data['returns'] >= 0.25* earnings_price_data['std']\n",
    "    short_entry = earnings_price_data['returns'] <= -0.25* earnings_price_data['std']\n",
    "    earnings_price_data.loc[long_entry, 'positions'] = 1\n",
    "    earnings_price_data.loc[short_entry, 'positions'] = -1\n",
    "    earnings_price_data = earnings_price_data.dropna()\n",
    "    \n",
    "    strategy_returns = earnings_price_data['positions'] * ((earnings_price_data['Close'] - earnings_price_data['Open']) \n",
    "                                                           / earnings_price_data['Open'])\n",
    "    \n",
    "    return strategy_returns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "53365ffa-a988-4f18-a978-480c053233c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "earnings_data = pd.read_csv('earnings_data_2018_2019.csv').sort_values(by='startdatetime', axis=0)\n",
    "price_data = pd.read_csv('spy_stocks_data_2017_2019.csv', index_col=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bcf58e24-bd88-4e17-9dea-8b1a4f84c4db",
   "metadata": {},
   "source": [
    "We store our collection of stock symbols in **`ticker_lists`**. Then, for each ticker in that list, we call **`pead_strategy(ticker, earnings_data, price_data)`**, which generates the strategy’s returns for that specific ticker. Finally, we consolidate all the returned data and label it with the corresponding ticker names, resulting in a combined dataset of strategy returns across our entire portfolio.\n",
    "\n",
    "Create a list of tickers we wish to explore"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "787abe96-4908-407c-8bff-98843bb2ddc0",
   "metadata": {},
   "outputs": [],
   "source": [
    "ticker_list = ['AAPL', 'AMZN', 'GOOGL' 'BRK.A', 'V', 'JPM', 'JNJ' 'WMT', 'MA', 'PG', 'BAC', 'T', 'UNH'\n",
    "               'XOM', 'HD', 'KO', 'MRK', 'PFE', 'CVX', 'CSCO', 'CMCSA', 'PEP', 'WFC', 'BA', 'ADBE']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8033b30e-519f-4231-873c-a76fa9fd17b6",
   "metadata": {},
   "source": [
    "Now call the pead_strategy function and `concat` with ticker_list "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "cb1d3a7e-5049-4c9d-acf8-1686498e7372",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['returns'] = (price_data.Open - price_data.Close.shift(1)) / price_data.Close.shift(1)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['std'] = price_data['returns'].rolling(90).std()\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  earnings_data[\"trading_time\"] = earnings_data[\"startdatetime\"].apply(get_trade_open)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['returns'] = (price_data.Open - price_data.Close.shift(1)) / price_data.Close.shift(1)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['std'] = price_data['returns'].rolling(90).std()\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  earnings_data[\"trading_time\"] = earnings_data[\"startdatetime\"].apply(get_trade_open)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['returns'] = (price_data.Open - price_data.Close.shift(1)) / price_data.Close.shift(1)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['std'] = price_data['returns'].rolling(90).std()\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  earnings_data[\"trading_time\"] = earnings_data[\"startdatetime\"].apply(get_trade_open)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['returns'] = (price_data.Open - price_data.Close.shift(1)) / price_data.Close.shift(1)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['std'] = price_data['returns'].rolling(90).std()\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  earnings_data[\"trading_time\"] = earnings_data[\"startdatetime\"].apply(get_trade_open)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['returns'] = (price_data.Open - price_data.Close.shift(1)) / price_data.Close.shift(1)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['std'] = price_data['returns'].rolling(90).std()\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  earnings_data[\"trading_time\"] = earnings_data[\"startdatetime\"].apply(get_trade_open)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['returns'] = (price_data.Open - price_data.Close.shift(1)) / price_data.Close.shift(1)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['std'] = price_data['returns'].rolling(90).std()\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  earnings_data[\"trading_time\"] = earnings_data[\"startdatetime\"].apply(get_trade_open)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['returns'] = (price_data.Open - price_data.Close.shift(1)) / price_data.Close.shift(1)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['std'] = price_data['returns'].rolling(90).std()\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  earnings_data[\"trading_time\"] = earnings_data[\"startdatetime\"].apply(get_trade_open)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['returns'] = (price_data.Open - price_data.Close.shift(1)) / price_data.Close.shift(1)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['std'] = price_data['returns'].rolling(90).std()\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  earnings_data[\"trading_time\"] = earnings_data[\"startdatetime\"].apply(get_trade_open)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['returns'] = (price_data.Open - price_data.Close.shift(1)) / price_data.Close.shift(1)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['std'] = price_data['returns'].rolling(90).std()\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  earnings_data[\"trading_time\"] = earnings_data[\"startdatetime\"].apply(get_trade_open)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['returns'] = (price_data.Open - price_data.Close.shift(1)) / price_data.Close.shift(1)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['std'] = price_data['returns'].rolling(90).std()\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  earnings_data[\"trading_time\"] = earnings_data[\"startdatetime\"].apply(get_trade_open)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['returns'] = (price_data.Open - price_data.Close.shift(1)) / price_data.Close.shift(1)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['std'] = price_data['returns'].rolling(90).std()\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  earnings_data[\"trading_time\"] = earnings_data[\"startdatetime\"].apply(get_trade_open)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['returns'] = (price_data.Open - price_data.Close.shift(1)) / price_data.Close.shift(1)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['std'] = price_data['returns'].rolling(90).std()\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  earnings_data[\"trading_time\"] = earnings_data[\"startdatetime\"].apply(get_trade_open)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['returns'] = (price_data.Open - price_data.Close.shift(1)) / price_data.Close.shift(1)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['std'] = price_data['returns'].rolling(90).std()\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  earnings_data[\"trading_time\"] = earnings_data[\"startdatetime\"].apply(get_trade_open)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['returns'] = (price_data.Open - price_data.Close.shift(1)) / price_data.Close.shift(1)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['std'] = price_data['returns'].rolling(90).std()\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  earnings_data[\"trading_time\"] = earnings_data[\"startdatetime\"].apply(get_trade_open)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['returns'] = (price_data.Open - price_data.Close.shift(1)) / price_data.Close.shift(1)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['std'] = price_data['returns'].rolling(90).std()\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  earnings_data[\"trading_time\"] = earnings_data[\"startdatetime\"].apply(get_trade_open)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['returns'] = (price_data.Open - price_data.Close.shift(1)) / price_data.Close.shift(1)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['std'] = price_data['returns'].rolling(90).std()\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  earnings_data[\"trading_time\"] = earnings_data[\"startdatetime\"].apply(get_trade_open)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['returns'] = (price_data.Open - price_data.Close.shift(1)) / price_data.Close.shift(1)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['std'] = price_data['returns'].rolling(90).std()\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  earnings_data[\"trading_time\"] = earnings_data[\"startdatetime\"].apply(get_trade_open)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['returns'] = (price_data.Open - price_data.Close.shift(1)) / price_data.Close.shift(1)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['std'] = price_data['returns'].rolling(90).std()\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  earnings_data[\"trading_time\"] = earnings_data[\"startdatetime\"].apply(get_trade_open)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['returns'] = (price_data.Open - price_data.Close.shift(1)) / price_data.Close.shift(1)\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  price_data['std'] = price_data['returns'].rolling(90).std()\n",
      "/var/folders/gn/nm0q8hp976s7l_kr29hj06280000gn/T/ipykernel_81441/702245738.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  earnings_data[\"trading_time\"] = earnings_data[\"startdatetime\"].apply(get_trade_open)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AAPL</th>\n",
       "      <th>AMZN</th>\n",
       "      <th>GOOGLBRK.A</th>\n",
       "      <th>V</th>\n",
       "      <th>JPM</th>\n",
       "      <th>JNJWMT</th>\n",
       "      <th>MA</th>\n",
       "      <th>PG</th>\n",
       "      <th>BAC</th>\n",
       "      <th>T</th>\n",
       "      <th>...</th>\n",
       "      <th>KO</th>\n",
       "      <th>MRK</th>\n",
       "      <th>PFE</th>\n",
       "      <th>CVX</th>\n",
       "      <th>CSCO</th>\n",
       "      <th>CMCSA</th>\n",
       "      <th>PEP</th>\n",
       "      <th>WFC</th>\n",
       "      <th>BA</th>\n",
       "      <th>ADBE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-05-02 00:00:00</th>\n",
       "      <td>0.007647</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-08-01 00:00:00</th>\n",
       "      <td>0.011902</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-11-02 00:00:00</th>\n",
       "      <td>0.009878</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-30 00:00:00</th>\n",
       "      <td>0.012251</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-05-01 00:00:00</th>\n",
       "      <td>0.003049</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                         AAPL  AMZN  GOOGLBRK.A   V  JPM  JNJWMT  MA  PG  BAC  \\\n",
       "2018-05-02 00:00:00  0.007647   NaN         NaN NaN  NaN     NaN NaN NaN  NaN   \n",
       "2018-08-01 00:00:00  0.011902   NaN         NaN NaN  NaN     NaN NaN NaN  NaN   \n",
       "2018-11-02 00:00:00  0.009878   NaN         NaN NaN  NaN     NaN NaN NaN  NaN   \n",
       "2019-01-30 00:00:00  0.012251   NaN         NaN NaN  NaN     NaN NaN NaN  NaN   \n",
       "2019-05-01 00:00:00  0.003049   NaN         NaN NaN  NaN     NaN NaN NaN  NaN   \n",
       "\n",
       "                      T  ...  KO  MRK  PFE  CVX  CSCO  CMCSA  PEP  WFC  BA  \\\n",
       "2018-05-02 00:00:00 NaN  ... NaN  NaN  NaN  NaN   NaN    NaN  NaN  NaN NaN   \n",
       "2018-08-01 00:00:00 NaN  ... NaN  NaN  NaN  NaN   NaN    NaN  NaN  NaN NaN   \n",
       "2018-11-02 00:00:00 NaN  ... NaN  NaN  NaN  NaN   NaN    NaN  NaN  NaN NaN   \n",
       "2019-01-30 00:00:00 NaN  ... NaN  NaN  NaN  NaN   NaN    NaN  NaN  NaN NaN   \n",
       "2019-05-01 00:00:00 NaN  ... NaN  NaN  NaN  NaN   NaN    NaN  NaN  NaN NaN   \n",
       "\n",
       "                     ADBE  \n",
       "2018-05-02 00:00:00   NaN  \n",
       "2018-08-01 00:00:00   NaN  \n",
       "2018-11-02 00:00:00   NaN  \n",
       "2019-01-30 00:00:00   NaN  \n",
       "2019-05-01 00:00:00   NaN  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "portfolio = pd.concat([pead_strategy(ticker, earnings_data, price_data)\n",
    "                       for ticker in ticker_list], keys=ticker_list, axis=1)\n",
    "portfolio.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "29d074ef-14fb-4d78-891b-c60dd02a9b7e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "832150db-1f5e-427c-8e6e-72a4f0d9d23f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c5d8751d-d1f9-4ec5-815e-fee582623646",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
